/*
 * generated by Xtext 2.14.0
 */
package fr.ut2j.m1ice.fsm.texteditor.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.ut2j.m1ice.fsm.FSM
import fr.ut2j.m1ice.fsm.InitialState
import fr.ut2j.m1ice.fsm.FinalState

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyFSMGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var myFSM = resource.contents.get(0) as FSM
		fsa.generateFile('FSM.java',
			'''
			abstract class FSM {
				
			}
			''')
		fsa.generateFile(myFSM.name + ".java",
			'''
			class «myFSM.name» extends FSM {
				
				public static void main(String[] args) {
					«FOR state : myFSM.state»
					«IF state instanceof InitialState»
					State initState = new «state.name»();
					«ENDIF»
					«IF state instanceof FinalState»
					State finalState = new «state.name»();
					«ENDIF»
					«ENDFOR»
					State curState = initState;
					System.out.println("Initial state : " + curState.getClass().getSimpleName()); 
					while (!(curState.getClass().getSimpleName().equals(finalState.getClass().getSimpleName()))) {
						switch (curState.getClass().getSimpleName()) {
							«FOR tr : myFSM.transition»
								case "«tr.source.name»":
									System.out.println("Transition from «tr.source.name» to «tr.target.name»...");
									curState = new «tr.target.name»();
									break;
							«ENDFOR»
						}
					}
					System.out.println("Final state achieved : " + curState.getClass().getSimpleName());
				}
					
			}
			''')
		fsa.generateFile('State.java',
			'''
			interface State {
				
			}
			''')
		fsa.generateFile('InitialState.java',
			'''
			abstract class InitialState implements State {
				
			} 
			'''
		)
		fsa.generateFile('FinalState.java',
			'''
			abstract class FinalState implements State {
				
			} 
			'''
		)
		myFSM.state.forEach[s | fsa.generateFile(s.name + '.java',
			'''
			«IF s instanceof InitialState»
			class «s.name» extends InitialState {
			«ELSEIF s instanceof FinalState»
			class «s.name» extends FinalState {
			«ELSE»
			class «s.name» implements State {
			«ENDIF»
				
			}
			''')]
	}
}
