/**
 * generated by Xtext 2.14.0
 */
package fr.ut2j.m1ice.fsm.texteditor.generator;

import fr.ut2j.m1ice.fsm.FSM;
import fr.ut2j.m1ice.fsm.FinalState;
import fr.ut2j.m1ice.fsm.InitialState;
import fr.ut2j.m1ice.fsm.State;
import fr.ut2j.m1ice.fsm.Transition;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyFSMGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    FSM myFSM = ((FSM) _get);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("abstract class FSM {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile("FSM.java", _builder);
    String _name = myFSM.getName();
    String _plus = (_name + ".java");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class ");
    String _name_1 = myFSM.getName();
    _builder_1.append(_name_1);
    _builder_1.append(" extends FSM {");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public static void main(String[] args) {");
    _builder_1.newLine();
    {
      EList<State> _state = myFSM.getState();
      for(final State state : _state) {
        {
          if ((state instanceof InitialState)) {
            _builder_1.append("\t\t");
            _builder_1.append("State initState = new ");
            String _name_2 = ((InitialState)state).getName();
            _builder_1.append(_name_2, "\t\t");
            _builder_1.append("();");
            _builder_1.newLineIfNotEmpty();
          }
        }
        {
          if ((state instanceof FinalState)) {
            _builder_1.append("\t\t");
            _builder_1.append("State finalState = new ");
            String _name_3 = ((FinalState)state).getName();
            _builder_1.append(_name_3, "\t\t");
            _builder_1.append("();");
            _builder_1.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder_1.append("\t\t");
    _builder_1.append("State curState = initState;");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("System.out.println(\"Initial state : \" + curState.getClass().getSimpleName()); ");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("while (!(curState.getClass().getSimpleName().equals(finalState.getClass().getSimpleName()))) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("switch (curState.getClass().getSimpleName()) {");
    _builder_1.newLine();
    {
      EList<Transition> _transition = myFSM.getTransition();
      for(final Transition tr : _transition) {
        _builder_1.append("\t\t\t\t");
        _builder_1.append("case \"");
        String _name_4 = tr.getSource().getName();
        _builder_1.append(_name_4, "\t\t\t\t");
        _builder_1.append("\":");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("\t");
        _builder_1.append("System.out.println(\"Transition from ");
        String _name_5 = tr.getSource().getName();
        _builder_1.append(_name_5, "\t\t\t\t\t");
        _builder_1.append(" to ");
        String _name_6 = tr.getTarget().getName();
        _builder_1.append(_name_6, "\t\t\t\t\t");
        _builder_1.append("...\");");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("\t");
        _builder_1.append("curState = new ");
        String _name_7 = tr.getTarget().getName();
        _builder_1.append(_name_7, "\t\t\t\t\t");
        _builder_1.append("();");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("\t");
        _builder_1.append("break;");
        _builder_1.newLine();
      }
    }
    _builder_1.append("\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("System.out.println(\"Final state achieved : \" + curState.getClass().getSimpleName());");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    fsa.generateFile(_plus, _builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("interface State {");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    fsa.generateFile("State.java", _builder_2);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("abstract class InitialState implements State {");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.newLine();
    _builder_3.append("} ");
    _builder_3.newLine();
    fsa.generateFile("InitialState.java", _builder_3);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("abstract class FinalState implements State {");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.newLine();
    _builder_4.append("} ");
    _builder_4.newLine();
    fsa.generateFile("FinalState.java", _builder_4);
    final Consumer<State> _function = (State s) -> {
      String _name_8 = s.getName();
      String _plus_1 = (_name_8 + ".java");
      StringConcatenation _builder_5 = new StringConcatenation();
      {
        if ((s instanceof InitialState)) {
          _builder_5.append("class ");
          String _name_9 = ((InitialState)s).getName();
          _builder_5.append(_name_9);
          _builder_5.append(" extends InitialState {");
          _builder_5.newLineIfNotEmpty();
        } else {
          if ((s instanceof FinalState)) {
            _builder_5.append("class ");
            String _name_10 = ((FinalState)s).getName();
            _builder_5.append(_name_10);
            _builder_5.append(" extends FinalState {");
            _builder_5.newLineIfNotEmpty();
          } else {
            _builder_5.append("class ");
            String _name_11 = s.getName();
            _builder_5.append(_name_11);
            _builder_5.append(" implements State {");
            _builder_5.newLineIfNotEmpty();
          }
        }
      }
      _builder_5.append("\t");
      _builder_5.newLine();
      _builder_5.append("}");
      _builder_5.newLine();
      fsa.generateFile(_plus_1, _builder_5);
    };
    myFSM.getState().forEach(_function);
  }
}
